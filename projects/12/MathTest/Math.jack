// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 2*16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) { return -x; }
        return x;
    }

    /* Checks if the ith bit of x is set, helper function for mult */
    function boolean bit(int x, int i) {
        return (x & twoToThe[i]);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     *
     *  Implementation from Slide 12
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;
        var int w;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        let w = 16;
        while (i < w) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     *
     *  Implementation from Slide 12
     */
    function in divide(int x, int y) {
        var int q;
        var boolean isNeg;

        // Get sign
        let isNeg = ( ((x < 0) & (y > 0)) | ((x > 0) & (y < 0)) );
        let x = Math.abs(x);
        let y = Math.abs(y);

        if ((y > x)) { return 0; }

        let q = Math.divide(x, 2*y);
        if ( (x-(2*q*y)) < y ) { 
            if (isNeg) { return -(2*q); } 
            else { return 2*q; }
        }
        
        if (isNeg) { return -(2*q + 1); }
        return (2*q + 1);   
    }

    /** Returns the integer part of the square root of x,
     *
     *  Implementation from Slide 12
     */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int tmp;
        let y = 0;
        let j = (16/2) - 1;

        while (j > -1) {
            let tmp = (y + twoToThe[j]) * (y + twoToThe[j]);
            if ( ~(tmp > x) & (tmp > 0)) {
                let y = y + twoToThe[j];
            } 
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (b > a) { return b; }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (b < a) { return b; }
        return a;
    }

    /** Returns the modulo remainder of a div b,
     *  for use in other classes
     */
    function int _modulo(int a, int b) {
        return a - ((a/b) * b);
    }

    /** Returns a^b,
     *  for use in other classes
     */
    function int _pow(int a, int b) {
        if (b < 0) { do Sys.error(101); }

        if (b = 0) { return 1; }
        else {
            if (Math._modulo(b, 2) = 0) {
                return Math._pow(a, b/2) * Math._pow(a, b/2);
            }
            else {
                return a * Math._pow(a, b/2) * Math._pow(a, b/2);
            }
        }
    } 
}