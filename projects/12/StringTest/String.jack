// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    static int ZERO_ASCII;
    static int NINE_ASCII;
    static int MINUS_SIGN_ASCII;
    field int maxSize;
    field Array value;
    field int size;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {        
        let ZERO_ASCII = 48;
        let NINE_ASCII = 57;
        let MINUS_SIGN_ASCII = 45;
        
        if (maxLength < 1) { 
            let maxLength = 1;
        }
        
        // let value = Array.new(maxLength);
        let value = Memory.alloc(maxLength);
        let maxSize = maxLength;
        let size = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxSize > 0) { do value.dispose(); }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() { return size; }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > size) | (j = size)) {
            do Sys.error(15);
        }
        return value[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > size) | (j = size)) {
            do Sys.error(16);
        }

        let value[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (size = maxSize) {
            do Sys.error(17);
        }

        let value[size] = c;
        let size = size + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (size = 0) { do Sys.error(18); }
        let size = size - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i;
        var boolean isConverting, isNegative;
        let val = 0;
        let i = 0;
        let isConverting = true;
        let isNegative = false;

        if (size = 0) { return 0; }

        // '-' == 45
        // '0' == 48 ... '9' = 57
        if (value[0] = MINUS_SIGN_ASCII) {
            let i = 1;
            let isNegative = true;
        }
        
        while ((isConverting) & (i < size)) {
            if (String.isCharInRange(value[i], ZERO_ASCII, NINE_ASCII)) {
                let val = (value[i] - ZERO_ASCII) + (10 * val);
                let i = i + 1;
            }
            else { let isConverting = false; }
        }

        if (isNegative) { let val = val * (-1); }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        do clear();

        if (val < 0) {
            let val = val * (-1);
            let value[0] = MINUS_SIGN_ASCII;
            let size = size + 1;
        }

        do _setIntDigitByDigit(val);
        return;
    }

    /** Recursivly append int digits to our string */
    method void _setIntDigitByDigit(int val) {
        var int digit;

        if (val < 10) {
            do appendChar(String.digitToChar(val));
            return;
        }

        let digit = _modulo(val, 10);
        let val = val / 10;
        do _setIntDigitByDigit(val);

        do appendChar(String.digitToChar(digit));
        return;
    }

    /** Clears the String */
    method void clear() {
        let size = 0;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** Returns the char representation of int d */
    function char digitToChar(int d) {
        if ((d < 0) | (d > 9)) {
            do Sys.error(100);
        }
        return d + ZERO_ASCII;
    }

    /** Checks if c is between lb and rb (both inclusive) */
    function boolean isCharInRange(char c, int leftBound, int rightBound) {
        return c > (leftBound-1) & (c < (rightBound+1));
    }

    /** Returns the modulo remainder of a div b,
     *  copied from MathOS file, for simpler testing */
    method int _modulo(int a, int b) {
        return a - ((a/b) * b);
    }
}
