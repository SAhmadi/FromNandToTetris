// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // Instruction Type
    And(a=instruction[15], b=true, out=instrC);
    Xor(a=instruction[15], b=true, out=instrA);
    
    // Destination
    And(a=instruction[5], b=instrC, out=destA);
    And(a=instruction[4], b=instrC, out=destD);
    And(a=instruction[3], b=instrC, out=destM);

    // ALU Flags
    Or(a=instruction[11], b=false, out=zx);
    Or(a=instruction[10], b=false, out=nx);
    Or(a=instruction[9], b=false, out=zy);
    Or(a=instruction[8], b=false, out=ny);
    Or(a=instruction[7], b=false, out=f);
    Or(a=instruction[6], b=false, out=no);

    // Jump Flags
    Not(in=true, out=noJmp);    // No JMP
    Not(in=false, out=jmp);     // JMP

    And(a=ng, b=true, out=jlt); // JLT <
    Not(in=jle, out=jgt);       // JGT >

    And(a=zr, b=true, out=jeq); // JEQ ==
    Not(in=zr, out=jne);        // JNE !=
    
    Or(a=jgt, b=jeq, out=jge);  // JGE >=
    Or(a=jlt, b=jeq, out=jle);  // JLE <=


    // Store into Register A and output address
    Mux16(a=AluOutForRegA, b=instruction, sel=instrA, out=instrOut);
    Or(a=destA, b=instrA, out=loadA);
    ARegister(in=instrOut, load=loadA, out[0..14]=addressM , out=regAOut);

    // Store into Register D 
    DRegister(in=AluOutForRegD, load=destD, out=aluIn1);

    // Store into Memory
    And(a=destM, b=instrC, out=writeM);

    // ALU Input from DataIn or RegisterA
    Mux16(a=regAOut, b=inM, sel=instruction[12], out=aluIn2);

    // ALU
    ALU(x=aluIn1, y=aluIn2, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, zr=zr, ng=ng, out=outAlu, out=AluOutForRegA, out=AluOutForRegD);
    Or16(a=outAlu, b=false, out=outM);

    // PC
    Mux8Way16(a[0]=noJmp, b[0]=jgt, c[0]=jeq, d[0]=jge, e[0]=jlt, f[0]=jne, g[0]=jle, h[0]=jmp, sel=instruction[0..2], out[0]=checkIfJmp);
    
    And(a=checkIfJmp, b=instrC, out=isJumping);
    PC(in=regAOut, load=isJumping, inc=true, reset=reset, out[0..14]=pc);
}